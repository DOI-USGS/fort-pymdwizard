
import pytaxize

pytaxize.getcommentdetailfromtsn(tsn=180543)

dir(pytaxize.itis)

import pytaxize
df = pytaxize.itis.searchbycommonname(x="grizzly")
df

pytaxize.itis.getfullhierarchyfromtsn(202385)

results = pytaxize.itis.getfullhierarchyfromtsn(202385)

from lxml import etree

taxonomicclassification = etree.Element("taxclass")
taxrankname = etree.Element("taxrankname")
taxrankname.text = 'Subspecies'
taxonomicclassification.insert(0, taxrankname)

taxrankvalue = etree.Element("taxrankvalue")
taxrankvalue.text = 'Ursus arctos horribilis'
taxonomicclassification.append(taxrankvalue)

etree.tostring(taxonomicclassification)

taxonomicclassification.insert?

def gen_taxclass(rankName, taxonName, commonnames=[], taxonclass=[], **kwargs):
    taxonomicclassification = etree.Element("taxclass")
    taxrankname = etree.Element("taxrankname")
    taxrankname.text = rankName
    taxonomicclassification.insert(0, taxrankname)

    taxrankvalue = etree.Element("taxrankvalue")
    taxrankvalue.text = taxonName
    taxonomicclassification.insert(1, taxrankvalue)
    
    for commonname in commonnames:
        taxcommonname = etree.Element("appcommonname")
        taxcommonname.text = commonname
        taxonomicclassification.append(taxcommonname)
        
    for taxclass in taxonclass:
        taxonomicclassification.append(taxclass)
        
    return taxonomicclassification

gen_taxclass(**results[-1])

cur_tax = []

for item in reversed(results):
#     print(item)
    this_tax = gen_taxclass(**item, taxonclass=cur_tax)
#     print(etree.tostring(this_tax))
    cur_tax = [this_tax]

print(str(etree.tostring(cur_tax[0],  pretty_print=True)))

tsns = [622054, 180575, 175420, 114347]

results = [pytaxize.itis.getfullhierarchyfromtsn(tsn) for tsn in tsns]

results

[r[1]['rankName'] for r in results]

class taxon(object):
    def __init__(self, rankname, taxonname, 
                 tsn, children=None):
        self.rankname = rankname
        self.taxonname = taxonname
        self.tsn = tsn
        if children:
            self.children = children
        else:
            self.children = []
    
    def __eq__(self, other):
        return self.rankname == other.rankname and self.taxonname == other.taxonname and self.tsn == other.tsn
    
    def __repr__(self):
        return self.__str__()
        
    def __str__(self):
        string = "{}:{} (tsn={})".format(self.rankname, self.taxonname, self.tsn)
        string += "\n\t{}".format("\n".join([str(c) for c in self.children]))
        return string
    
    def add_child(self, child):
        self.children.append(child)
        
    def find_child_by_rankname(self, ranknane):
        pass
    
    
        

animalia = taxon('Kingdom', 'Animalia', '914179')
bilateria = taxon('Subkingdom', 'Bilateria', '914154')

# animalia.add_child(bilateria)

animalia2 = taxon('Kingdom', 'Animalia', '914179')

animalia == animalia2

animalia.add_child(bilateria)

animalia

bilateria.children[0].children[0]

{'Animalia':{'rankName':'Kingdom',
             'tsn':'202423',
             'children':{'Bilateria',
            
        }}}

[{'rankName':'Kingdom',
 'taxonName':'Animalia',
 'tsn':'202423':
 'children':[{'rankName':'Subkingdom',
             'taxonName':'Bilateria',
             'tsn':'202423':
             'children':[{'rankName':'Infrakingdom',
                          'taxonName':'Deuterostomia',
                          'tsn':'914156':
                          'children':[{
                                     }]
                        }]
              }]
}]

#from: http://stackoverflow.com/questions/635483/what-is-the-best-way-to-implement-nested-dictionaries-in-python
class AutoVivification(dict):
    """Implementation of perl's autovivification feature."""
    def __getitem__(self, item):
        try:
            return dict.__getitem__(self, item)
        except KeyError:
            value = self[item] = type(self)()
            return value

nested_taxonomy = AutoVivification()

for species in results:
    for level in species:
        print(level)
    break























































comments =  pytaxize.itis.getcommentdetailfromtsn(tsn=180543)
list(comments.keys()) == ['commentator', 'comment', 'commtime',
                                     'updatedate', 'commid']

pytaxize.gethierarchyupfromtsn(tsn = 36485)[0]['rankName'] == 'Genus'

pytaxize.itis.getfullhierarchyfromtsn(tsn)[-2]

res, colnames = pytaxize.itis.getcommonnamesfromtsn(tsn=180543)

res

pytaxize.itis.getacceptednamesfromtsn('208527') == '208527'

pytaxize.itis.getcommentdetailfromtsn(tsn=180543).keys()

















































url_wsdl = 'http://www.itis.gov/ITISWebService/services/ITISService?wsdl'
url_service = "https://www.itis.gov/ITISWebService/services/ITISService"

from suds.client import Client
client = Client(url_wsdl, location=url_service)

scn = client.factory.create('searchByCommonName')

scn.srchKey = 'bear'

result = client.service.getKingdomNames()

result[0]

tsn = 33859

pyt

import sys
sys.executable



from suds.client import Client
url_wsdl = 'http://www.itis.gov/ITISWebService/services/ITISService?wsdl'
url_service = "https://www.itis.gov/ITISWebService/services/ITISService"
client = Client(url_wsdl, location=url_service)
list_of_methods = [method for method in client.wsdl.services[0].ports[0].methods]

list_of_methods

import suds
o = None
def list_all(url):
    client = suds.client.Client(url)
    for service in client.wsdl.services:
        for port in service.ports:
            methods = port.methods.values()
            for method in methods:
                print(method.name, sep="")
                for part in method.soap.input.body.parts:
                    part_type = part.type
                    if(not part_type):
                        part_type = part.element[0]
                    o = client.factory.create(part_type)
                    params = str(o).split("{")[-1].split()[0]
                    print(params)
list_all(url_wsdl)

from __future__ import print_function

import argparse
import logging
import os
import sys
from collections import deque

import six
from lxml import etree

from soapfish.soap import SOAPVersion
from soapfish.utils import (
    find_xsd_namespaces,
    get_rendering_environment,
    open_document,
    resolve_location,
)
from soapfish.wsdl import get_wsdl_classes
from soapfish.xsd2py import schema_to_py

logger = logging.getLogger('soapfish')



# --- Helpers -----------------------------------------------------------------
def reorder_schemas(schemas):
    schemas, targets, counter, x = [], set(), len(schemas), deque(schemas)
    while x and counter > 0:
        counter -= 1
        schema = x.popleft()
        ns = set(i.namespace for i in schema.imports)
        if x and ns and ns - targets:
            x.append(schema)
        else:
            schemas.append(schema)
            targets.add(schema.targetNamespace)
    schemas.extend(x)  # always add remaining unorderable schemas...
    return schemas


def merge_imports(wsdl, definitions, xsd_namespaces, cwd=None, seen=None):

    def deduplicate(seq):
        seen = set()
        return [x for x in seq if x not in seen and not seen.add(x)]

    if seen is None:
        seen = set()

    for i in definitions.imports:
        path, cwd, location = resolve_location(i.location, cwd)

        if path in seen:
            continue

        seen.add(path)

        xml = open_document(path)
        xml = etree.fromstring(xml)

        xsd_namespaces.update(find_xsd_namespaces(xml))

        imported = wsdl.Definitions.parse_xmlelement(xml)

        if imported.imports:
            merge_imports(wsdl, imported, xsd_namespaces, cwd=cwd, seen=seen)

        if imported.types and imported.types.schemas:
            if not definitions.types:
                definitions.types = wsdl.Types()
            definitions.types.schemas = deduplicate(imported.types.schemas + definitions.types.schemas)

        definitions.services = deduplicate(imported.services + definitions.services)
        definitions.bindings = deduplicate(imported.bindings + definitions.bindings)
        definitions.messages = deduplicate(imported.messages + definitions.messages)
        definitions.portTypes = deduplicate(imported.portTypes + definitions.portTypes)


def generate_code_from_wsdl(xml, target, use_wsa=False, encoding='utf8', cwd=None):

    if isinstance(xml, six.binary_type):
        xml = etree.fromstring(xml)

    if cwd is None:
        cwd = six.moves.getcwd()

    xsd_namespaces = find_xsd_namespaces(xml)

    soap_version = SOAPVersion.get_version_from_xml(xml)
    logger.info('Detected version of SOAP: %s', soap_version.NAME)

    wsdl = get_wsdl_classes(soap_version.BINDING_NAMESPACE)
    definitions = wsdl.Definitions.parse_xmlelement(xml)
    merge_imports(wsdl, definitions, xsd_namespaces, cwd=cwd)

    kw = {'cwd': cwd, 'parent_namespace': definitions.targetNamespace}
    schemas = reorder_schemas(definitions.types.schemas) if definitions.types else []
    schemas = ''.join(schema_to_py(schema, xsd_namespaces, **kw) for schema in schemas)

    env = get_rendering_environment(xsd_namespaces, module='soapfish.wsdl2py')
    tpl = env.get_template('wsdl')

    code = tpl.render(
        soap_version=soap_version,
        definitions=definitions,
        schemas=schemas,
        is_server=bool(target == 'server'),
        use_wsa=use_wsa,
    )

    return code.encode(encoding) if encoding else code


url_wsdl = 'http://www.itis.gov/ITISWebService/services/ITISService?wsdl'
xml = open_document(url_wsdl)

cwd = os.path.dirname(os.path.abspath(url_wsdl))

code = generate_code_from_wsdl(xml, 'client', True, cwd=cwd)

filename = r"N:\Metadata\MetadataWizard\pymdwizard\pymdwizard\Scratch\itis.py"
target = open(filename, 'wb')
target.write(code)
target.close()

# -*- coding: utf-8 -*-
# flake8:noqa
# isort:skip_file
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
##############################################################################
# Note: Generated by soapfish.wsdl2py at 2016-10-26 07:55:57.130144
#       Try to avoid editing it if you might need to regenerate it.
##############################################################################

from soapfish import soap, xsd, wsa

BaseHeader = wsa.Header

##############################################################################
# Schemas


# http://data.itis_service.itis.usgs.gov/xsd


class SvcTaxonomicBase(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcCommonName(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    commonName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    language = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonJurisdictionalOrigin(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    jurisdictionValue = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    origin = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    updateDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonComment(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    commentDetail = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    commentId = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    commentTimeStamp = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    commentator = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    updateDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcAcceptedName(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    acceptedName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    acceptedTsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    author = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonExpert(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    comment = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    expert = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    referenceFor = xsd.ListElement(__name__ + '.SvcReferenceForElement', tagname='referenceFor', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)
    updateDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcReferenceForElement(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    name = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    refLanguage = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    referredTsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonGeoDivision(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    geographicValue = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    updateDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonOtherSource(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    acquisitionDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    referenceFor = xsd.ListElement(SvcReferenceForElement, tagname='referenceFor', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)
    source = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    sourceComment = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    sourceType = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    updateDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    version = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonPublication(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    actualPubDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    isbn = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    issn = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    listedPubDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    pages = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    pubComment = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    pubName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    pubPlace = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    publisher = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    referenceAuthor = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    referenceFor = xsd.ListElement(SvcReferenceForElement, tagname='referenceFor', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)
    title = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    updateDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonName(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    author = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    sciName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcItisTermList(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    itisTerms = xsd.ListElement(__name__ + '.SvcItisTerm', tagname='itisTerms', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)
    requestedName = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcAnyMatchList(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    anyMatchList = xsd.ListElement(__name__ + '.SvcAnyMatch', tagname='anyMatchList', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcAnyMatch(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    author = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    commonNameList = xsd.Element(__name__ + '.SvcCommonNameList', minOccurs=0, nillable=True)
    matchType = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    sciName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcScientificNameList(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    scientificNames = xsd.ListElement(__name__ + '.SvcScientificName', tagname='scientificNames', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcListBase(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcCommonNameList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    commonNames = xsd.ListElement(SvcCommonName, tagname='commonNames', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonJurisdictionalOriginList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    jurisdictionalOrigins = xsd.ListElement(SvcTaxonJurisdictionalOrigin, tagname='jurisdictionalOrigins', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonCommentList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    comments = xsd.ListElement(SvcTaxonComment, tagname='comments', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonDateData(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    initialTimeStamp = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    updateDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcHierarchyRecord(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    author = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    parentName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    parentTsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    rankName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    taxonName = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcHierarchyRecordList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    author = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    hierarchyList = xsd.ListElement(SvcHierarchyRecord, tagname='hierarchyList', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)
    rankName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    sciName = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcFullRecord(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    acceptedNameList = xsd.Element(__name__ + '.SvcAcceptedNameList', minOccurs=0, nillable=True)
    commentList = xsd.Element(SvcTaxonCommentList, minOccurs=0, nillable=True)
    commonNameList = xsd.Element(SvcCommonNameList, minOccurs=0, nillable=True)
    completenessRating = xsd.Element(__name__ + '.SvcGlobalSpeciesCompleteness', minOccurs=0, nillable=True)
    coreMetadata = xsd.Element(__name__ + '.SvcCoreMetadata', minOccurs=0, nillable=True)
    credibilityRating = xsd.Element(__name__ + '.SvcCredibilityData', minOccurs=0, nillable=True)
    currencyRating = xsd.Element(__name__ + '.SvcCurrencyData', minOccurs=0, nillable=True)
    dateData = xsd.Element(SvcTaxonDateData, minOccurs=0, nillable=True)
    expertList = xsd.Element(__name__ + '.SvcTaxonExpertList', minOccurs=0, nillable=True)
    geographicDivisionList = xsd.Element(__name__ + '.SvcTaxonGeoDivisionList', minOccurs=0, nillable=True)
    hierarchyUp = xsd.Element(SvcHierarchyRecord, minOccurs=0, nillable=True)
    jurisdictionalOriginList = xsd.Element(SvcTaxonJurisdictionalOriginList, minOccurs=0, nillable=True)
    kingdom = xsd.Element(__name__ + '.SvcKingdomInfo', minOccurs=0, nillable=True)
    otherSourceList = xsd.Element(__name__ + '.SvcTaxonOtherSourceList', minOccurs=0, nillable=True)
    parentTSN = xsd.Element(__name__ + '.SvcParentTsn', minOccurs=0, nillable=True)
    publicationList = xsd.Element(__name__ + '.SvcTaxonPublicationList', minOccurs=0, nillable=True)
    scientificName = xsd.Element(__name__ + '.SvcScientificName', minOccurs=0, nillable=True)
    synonymList = xsd.Element(__name__ + '.SvcSynonymNameList', minOccurs=0, nillable=True)
    taxRank = xsd.Element(__name__ + '.SvcTaxonRankInfo', minOccurs=0, nillable=True)
    taxonAuthor = xsd.Element(__name__ + '.SvcTaxonAuthorship', minOccurs=0, nillable=True)
    unacceptReason = xsd.Element(__name__ + '.SvcUnacceptData', minOccurs=0, nillable=True)
    usage = xsd.Element(__name__ + '.SvcTaxonUsageData', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcAcceptedNameList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    acceptedNames = xsd.ListElement(SvcAcceptedName, tagname='acceptedNames', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcGlobalSpeciesCompleteness(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    completeness = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    rankId = xsd.Element(xsd.Int, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcCoreMetadata(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    credRating = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    rankId = xsd.Element(xsd.Int, minOccurs=0)
    taxonCoverage = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    taxonCurrency = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    taxonUsageRating = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    unacceptReason = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcCredibilityData(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    credRating = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcCurrencyData(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    rankId = xsd.Element(xsd.Int, minOccurs=0)
    taxonCurrency = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonExpertList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    experts = xsd.ListElement(SvcTaxonExpert, tagname='experts', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonGeoDivisionList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    geoDivisions = xsd.ListElement(SvcTaxonGeoDivision, tagname='geoDivisions', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcKingdomInfo(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    kingdomId = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    kingdomName = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonOtherSourceList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    otherSources = xsd.ListElement(SvcTaxonOtherSource, tagname='otherSources', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcParentTsn(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    parentTsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonPublicationList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    publications = xsd.ListElement(SvcTaxonPublication, tagname='publications', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcScientificName(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    author = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    combinedName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    kingdom = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    unitInd1 = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    unitInd2 = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    unitInd3 = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    unitInd4 = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    unitName1 = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    unitName2 = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    unitName3 = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    unitName4 = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcSynonymNameList(SvcListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    synonyms = xsd.ListElement(SvcTaxonName, tagname='synonyms', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonRankInfo(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    kingdomId = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    kingdomName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    rankId = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    rankName = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonAuthorship(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    authorship = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    updateDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcUnacceptData(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    unacceptReason = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcTaxonUsageData(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    taxonUsageRating = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcLSIDRecord(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    authorship = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    genusPart = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    infragenericEpithet = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    infraspecificEpithet = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    lsid = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    nameComplete = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    nomenclaturalCode = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    rank = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    rankString = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    specificEpithet = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    uninomial = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcItisTerm(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    author = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    commonNames = xsd.ListElement(xsd.String, tagname='commonNames', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)
    nameUsage = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    scientificName = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcCoverageData(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    rankId = xsd.Element(xsd.Int, minOccurs=0)
    taxonCoverage = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcReviewYear(SvcTaxonomicBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    rankId = xsd.Element(xsd.Int, minOccurs=0)
    reviewYear = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


Schema_04205 = xsd.Schema(
    imports=[],
    includes=[],
    targetNamespace='http://data.itis_service.itis.usgs.gov/xsd',
    elementFormDefault='qualified',
    simpleTypes=[],
    attributeGroups=[],
    groups=[],
    complexTypes=[SvcTaxonomicBase, SvcCommonName, SvcTaxonJurisdictionalOrigin, SvcTaxonComment, SvcAcceptedName, SvcTaxonExpert, SvcReferenceForElement, SvcTaxonGeoDivision, SvcTaxonOtherSource, SvcTaxonPublication, SvcTaxonName, SvcItisTermList, SvcAnyMatchList, SvcAnyMatch, SvcScientificNameList, SvcListBase, SvcCommonNameList, SvcTaxonJurisdictionalOriginList, SvcTaxonCommentList, SvcTaxonDateData, SvcHierarchyRecord, SvcHierarchyRecordList, SvcFullRecord, SvcAcceptedNameList, SvcGlobalSpeciesCompleteness, SvcCoreMetadata, SvcCredibilityData, SvcCurrencyData, SvcTaxonExpertList, SvcTaxonGeoDivisionList, SvcKingdomInfo, SvcTaxonOtherSourceList, SvcParentTsn, SvcTaxonPublicationList, SvcScientificName, SvcSynonymNameList, SvcTaxonRankInfo, SvcTaxonAuthorship, SvcUnacceptData, SvcTaxonUsageData, SvcLSIDRecord, SvcItisTerm, SvcCoverageData, SvcReviewYear],
    elements={},
)


# http://metadata.itis_service.itis.usgs.gov/xsd


class SvcMetadataListBase(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcOriginValue(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    jurisdiction = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    origin = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcKingdomName(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    kingdomId = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    kingdomName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcDateData(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    updateDate = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcRankName(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    kingdomId = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    kingdomName = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    rankId = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    rankName = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcVernacularTsnList(SvcMetadataListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    language = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    vernacularTsns = xsd.ListElement(__name__ + '.SvcCommonName', tagname='vernacularTsns', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcCredibilityValueList(SvcMetadataListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    credibilityValues = xsd.ListElement(xsd.String, tagname='credibilityValues', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcGeographicValueList(SvcMetadataListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    geographicValues = xsd.ListElement(xsd.String, tagname='geographicValues', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcJurisdictionValueList(SvcMetadataListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    jurisdictionValues = xsd.ListElement(xsd.String, tagname='jurisdictionValues', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcOriginValueList(SvcMetadataListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    originValues = xsd.ListElement(SvcOriginValue, tagname='originValues', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcKingdomNameList(SvcMetadataListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    kingdomNames = xsd.ListElement(SvcKingdomName, tagname='kingdomNames', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcRankNameList(SvcMetadataListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    rankNames = xsd.ListElement(SvcRankName, tagname='rankNames', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SvcVernacularLanguageList(SvcMetadataListBase):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    languageNames = xsd.ListElement(xsd.String, tagname='languageNames', minOccurs=0, maxOccurs=xsd.UNBOUNDED, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


Schema_72759 = xsd.Schema(
    imports=[Schema_04205],
    includes=[],
    targetNamespace='http://metadata.itis_service.itis.usgs.gov/xsd',
    elementFormDefault='qualified',
    simpleTypes=[],
    attributeGroups=[],
    groups=[],
    complexTypes=[SvcMetadataListBase, SvcOriginValue, SvcKingdomName, SvcDateData, SvcRankName, SvcVernacularTsnList, SvcCredibilityValueList, SvcGeographicValueList, SvcJurisdictionValueList, SvcOriginValueList, SvcKingdomNameList, SvcRankNameList, SvcVernacularLanguageList],
    elements={},
)


# http://itis_service.itis.usgs.gov/xsd


class SvcDescription(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    description = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


Schema_4c569 = xsd.Schema(
    imports=[],
    includes=[],
    targetNamespace='http://itis_service.itis.usgs.gov/xsd',
    elementFormDefault='qualified',
    simpleTypes=[],
    attributeGroups=[],
    groups=[],
    complexTypes=[SvcDescription],
    elements={},
)


# http://itis_service.itis.usgs.gov


class SearchByCommonNameBeginsWith(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByCommonNameBeginsWithResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcCommonNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetJurisdictionalOriginFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetJurisdictionalOriginFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonJurisdictionalOriginList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCommentDetailFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCommentDetailFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonCommentList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetDateDataFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetDateDataFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonDateData', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetHierarchyUpFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetHierarchyUpFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcHierarchyRecord', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetHierarchyDownFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetHierarchyDownFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcHierarchyRecordList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetFullHierarchyFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetFullHierarchyFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcHierarchyRecordList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTsnByVernacularLanguage(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    language = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTsnByVernacularLanguageResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcVernacularTsnList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetFullRecordFromLSID(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    lsid = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetFullRecordFromLSIDResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcFullRecord', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetRecordFromLSID(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    lsid = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetRecordFromLSIDResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcLSIDRecord', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetITISTerms(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetITISTermsResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcItisTermList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetITISTermsFromScientificName(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetITISTermsFromScientificNameResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcItisTermList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetITISTermsFromCommonName(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetITISTermsFromCommonNameResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcItisTermList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchForAnyMatch(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchForAnyMatchResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcAnyMatchList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByCommonName(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByCommonNameResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcCommonNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByCommonNameEndsWith(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByCommonNameEndsWithResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcCommonNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificNameExact(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificNameExactResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcScientificNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificNameBeginsWith(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificNameBeginsWithResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcScientificNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificNameEndsWith(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificNameEndsWithResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcScientificNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificNameContains(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificNameContainsResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcScientificNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificName(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchByScientificNameResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcScientificNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetFullRecordFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetFullRecordFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcFullRecord', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetKingdomNameFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetKingdomNameFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcKingdomInfo', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetUnacceptabilityReasonFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetUnacceptabilityReasonFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcUnacceptData', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTaxonomicRankNameFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTaxonomicRankNameFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonRankInfo', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetParentTSNFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetParentTSNFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcParentTsn', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCommonNamesFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCommonNamesFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcCommonNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetAcceptedNamesFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetAcceptedNamesFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcAcceptedNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetSynonymNamesFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetSynonymNamesFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcSynonymNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetScientificNameFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetScientificNameFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcScientificName', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCoreMetadataFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCoreMetadataFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcCoreMetadata', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCredibilityRatingFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCredibilityRatingFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcCredibilityData', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTaxonomicUsageFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTaxonomicUsageFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonUsageData', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetGlobalSpeciesCompletenessFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetGlobalSpeciesCompletenessFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcGlobalSpeciesCompleteness', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCoverageFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCoverageFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcCoverageData', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCurrencyFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCurrencyFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcCurrencyData', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetReviewYearFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetReviewYearFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcReviewYear', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTaxonAuthorshipFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTaxonAuthorshipFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonAuthorship', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetExpertsFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetExpertsFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonExpertList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetPublicationsFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetPublicationsFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonPublicationList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetOtherSourcesFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetOtherSourcesFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonOtherSourceList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetGeographicDivisionsFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetGeographicDivisionsFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcTaxonGeoDivisionList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCredibilityRatings(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetCredibilityRatingsResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcCredibilityValueList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetGeographicValues(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetGeographicValuesResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcGeographicValueList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetJurisdictionValues(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetJurisdictionValuesResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcJurisdictionValueList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetJurisdictionalOriginValues(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetJurisdictionalOriginValuesResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcOriginValueList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetKingdomNames(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetKingdomNamesResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcKingdomNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetLastChangeDate(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetLastChangeDateResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcDateData', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetRankNames(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetRankNamesResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcRankNameList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetVernacularLanguages(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetVernacularLanguagesResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcVernacularLanguageList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchForAnyMatchPaged(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)
    pageSize = xsd.Element(xsd.Int, minOccurs=0)
    pageNum = xsd.Element(xsd.Int, minOccurs=0)
    ascend = xsd.Element(xsd.Boolean, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class SearchForAnyMatchPagedResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcAnyMatchList', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetAnyMatchCount(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    srchKey = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetAnyMatchCountResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(xsd.Long, tagname='return', minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetLSIDFromTSN(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    tsn = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetLSIDFromTSNResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(xsd.String, tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTSNFromLSID(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    lsid = xsd.Element(xsd.String, minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetTSNFromLSIDResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(xsd.String, tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetDescription(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetDescriptionResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _return = xsd.Element(__name__ + '.SvcDescription', tagname='return', minOccurs=0, nillable=True)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


Schema_91835 = xsd.Schema(
    imports=[Schema_04205, Schema_72759, Schema_4c569],
    includes=[],
    targetNamespace='http://itis_service.itis.usgs.gov',
    elementFormDefault='qualified',
    simpleTypes=[],
    attributeGroups=[],
    groups=[],
    complexTypes=[],
    elements={'searchByCommonNameBeginsWith': xsd.Element(SearchByCommonNameBeginsWith()), 'searchByCommonNameBeginsWithResponse': xsd.Element(SearchByCommonNameBeginsWithResponse()), 'getJurisdictionalOriginFromTSN': xsd.Element(GetJurisdictionalOriginFromTSN()), 'getJurisdictionalOriginFromTSNResponse': xsd.Element(GetJurisdictionalOriginFromTSNResponse()), 'getCommentDetailFromTSN': xsd.Element(GetCommentDetailFromTSN()), 'getCommentDetailFromTSNResponse': xsd.Element(GetCommentDetailFromTSNResponse()), 'getDateDataFromTSN': xsd.Element(GetDateDataFromTSN()), 'getDateDataFromTSNResponse': xsd.Element(GetDateDataFromTSNResponse()), 'getHierarchyUpFromTSN': xsd.Element(GetHierarchyUpFromTSN()), 'getHierarchyUpFromTSNResponse': xsd.Element(GetHierarchyUpFromTSNResponse()), 'getHierarchyDownFromTSN': xsd.Element(GetHierarchyDownFromTSN()), 'getHierarchyDownFromTSNResponse': xsd.Element(GetHierarchyDownFromTSNResponse()), 'getFullHierarchyFromTSN': xsd.Element(GetFullHierarchyFromTSN()), 'getFullHierarchyFromTSNResponse': xsd.Element(GetFullHierarchyFromTSNResponse()), 'getTsnByVernacularLanguage': xsd.Element(GetTsnByVernacularLanguage()), 'getTsnByVernacularLanguageResponse': xsd.Element(GetTsnByVernacularLanguageResponse()), 'getFullRecordFromLSID': xsd.Element(GetFullRecordFromLSID()), 'getFullRecordFromLSIDResponse': xsd.Element(GetFullRecordFromLSIDResponse()), 'getRecordFromLSID': xsd.Element(GetRecordFromLSID()), 'getRecordFromLSIDResponse': xsd.Element(GetRecordFromLSIDResponse()), 'getITISTerms': xsd.Element(GetITISTerms()), 'getITISTermsResponse': xsd.Element(GetITISTermsResponse()), 'getITISTermsFromScientificName': xsd.Element(GetITISTermsFromScientificName()), 'getITISTermsFromScientificNameResponse': xsd.Element(GetITISTermsFromScientificNameResponse()), 'getITISTermsFromCommonName': xsd.Element(GetITISTermsFromCommonName()), 'getITISTermsFromCommonNameResponse': xsd.Element(GetITISTermsFromCommonNameResponse()), 'searchForAnyMatch': xsd.Element(SearchForAnyMatch()), 'searchForAnyMatchResponse': xsd.Element(SearchForAnyMatchResponse()), 'searchByCommonName': xsd.Element(SearchByCommonName()), 'searchByCommonNameResponse': xsd.Element(SearchByCommonNameResponse()), 'searchByCommonNameEndsWith': xsd.Element(SearchByCommonNameEndsWith()), 'searchByCommonNameEndsWithResponse': xsd.Element(SearchByCommonNameEndsWithResponse()), 'searchByScientificNameExact': xsd.Element(SearchByScientificNameExact()), 'searchByScientificNameExactResponse': xsd.Element(SearchByScientificNameExactResponse()), 'searchByScientificNameBeginsWith': xsd.Element(SearchByScientificNameBeginsWith()), 'searchByScientificNameBeginsWithResponse': xsd.Element(SearchByScientificNameBeginsWithResponse()), 'searchByScientificNameEndsWith': xsd.Element(SearchByScientificNameEndsWith()), 'searchByScientificNameEndsWithResponse': xsd.Element(SearchByScientificNameEndsWithResponse()), 'searchByScientificNameContains': xsd.Element(SearchByScientificNameContains()), 'searchByScientificNameContainsResponse': xsd.Element(SearchByScientificNameContainsResponse()), 'searchByScientificName': xsd.Element(SearchByScientificName()), 'searchByScientificNameResponse': xsd.Element(SearchByScientificNameResponse()), 'getFullRecordFromTSN': xsd.Element(GetFullRecordFromTSN()), 'getFullRecordFromTSNResponse': xsd.Element(GetFullRecordFromTSNResponse()), 'getKingdomNameFromTSN': xsd.Element(GetKingdomNameFromTSN()), 'getKingdomNameFromTSNResponse': xsd.Element(GetKingdomNameFromTSNResponse()), 'getUnacceptabilityReasonFromTSN': xsd.Element(GetUnacceptabilityReasonFromTSN()), 'getUnacceptabilityReasonFromTSNResponse': xsd.Element(GetUnacceptabilityReasonFromTSNResponse()), 'getTaxonomicRankNameFromTSN': xsd.Element(GetTaxonomicRankNameFromTSN()), 'getTaxonomicRankNameFromTSNResponse': xsd.Element(GetTaxonomicRankNameFromTSNResponse()), 'getParentTSNFromTSN': xsd.Element(GetParentTSNFromTSN()), 'getParentTSNFromTSNResponse': xsd.Element(GetParentTSNFromTSNResponse()), 'getCommonNamesFromTSN': xsd.Element(GetCommonNamesFromTSN()), 'getCommonNamesFromTSNResponse': xsd.Element(GetCommonNamesFromTSNResponse()), 'getAcceptedNamesFromTSN': xsd.Element(GetAcceptedNamesFromTSN()), 'getAcceptedNamesFromTSNResponse': xsd.Element(GetAcceptedNamesFromTSNResponse()), 'getSynonymNamesFromTSN': xsd.Element(GetSynonymNamesFromTSN()), 'getSynonymNamesFromTSNResponse': xsd.Element(GetSynonymNamesFromTSNResponse()), 'getScientificNameFromTSN': xsd.Element(GetScientificNameFromTSN()), 'getScientificNameFromTSNResponse': xsd.Element(GetScientificNameFromTSNResponse()), 'getCoreMetadataFromTSN': xsd.Element(GetCoreMetadataFromTSN()), 'getCoreMetadataFromTSNResponse': xsd.Element(GetCoreMetadataFromTSNResponse()), 'getCredibilityRatingFromTSN': xsd.Element(GetCredibilityRatingFromTSN()), 'getCredibilityRatingFromTSNResponse': xsd.Element(GetCredibilityRatingFromTSNResponse()), 'getTaxonomicUsageFromTSN': xsd.Element(GetTaxonomicUsageFromTSN()), 'getTaxonomicUsageFromTSNResponse': xsd.Element(GetTaxonomicUsageFromTSNResponse()), 'getGlobalSpeciesCompletenessFromTSN': xsd.Element(GetGlobalSpeciesCompletenessFromTSN()), 'getGlobalSpeciesCompletenessFromTSNResponse': xsd.Element(GetGlobalSpeciesCompletenessFromTSNResponse()), 'getCoverageFromTSN': xsd.Element(GetCoverageFromTSN()), 'getCoverageFromTSNResponse': xsd.Element(GetCoverageFromTSNResponse()), 'getCurrencyFromTSN': xsd.Element(GetCurrencyFromTSN()), 'getCurrencyFromTSNResponse': xsd.Element(GetCurrencyFromTSNResponse()), 'getReviewYearFromTSN': xsd.Element(GetReviewYearFromTSN()), 'getReviewYearFromTSNResponse': xsd.Element(GetReviewYearFromTSNResponse()), 'getTaxonAuthorshipFromTSN': xsd.Element(GetTaxonAuthorshipFromTSN()), 'getTaxonAuthorshipFromTSNResponse': xsd.Element(GetTaxonAuthorshipFromTSNResponse()), 'getExpertsFromTSN': xsd.Element(GetExpertsFromTSN()), 'getExpertsFromTSNResponse': xsd.Element(GetExpertsFromTSNResponse()), 'getPublicationsFromTSN': xsd.Element(GetPublicationsFromTSN()), 'getPublicationsFromTSNResponse': xsd.Element(GetPublicationsFromTSNResponse()), 'getOtherSourcesFromTSN': xsd.Element(GetOtherSourcesFromTSN()), 'getOtherSourcesFromTSNResponse': xsd.Element(GetOtherSourcesFromTSNResponse()), 'getGeographicDivisionsFromTSN': xsd.Element(GetGeographicDivisionsFromTSN()), 'getGeographicDivisionsFromTSNResponse': xsd.Element(GetGeographicDivisionsFromTSNResponse()), 'getCredibilityRatings': xsd.Element(GetCredibilityRatings()), 'getCredibilityRatingsResponse': xsd.Element(GetCredibilityRatingsResponse()), 'getGeographicValues': xsd.Element(GetGeographicValues()), 'getGeographicValuesResponse': xsd.Element(GetGeographicValuesResponse()), 'getJurisdictionValues': xsd.Element(GetJurisdictionValues()), 'getJurisdictionValuesResponse': xsd.Element(GetJurisdictionValuesResponse()), 'getJurisdictionalOriginValues': xsd.Element(GetJurisdictionalOriginValues()), 'getJurisdictionalOriginValuesResponse': xsd.Element(GetJurisdictionalOriginValuesResponse()), 'getKingdomNames': xsd.Element(GetKingdomNames()), 'getKingdomNamesResponse': xsd.Element(GetKingdomNamesResponse()), 'getLastChangeDate': xsd.Element(GetLastChangeDate()), 'getLastChangeDateResponse': xsd.Element(GetLastChangeDateResponse()), 'getRankNames': xsd.Element(GetRankNames()), 'getRankNamesResponse': xsd.Element(GetRankNamesResponse()), 'getVernacularLanguages': xsd.Element(GetVernacularLanguages()), 'getVernacularLanguagesResponse': xsd.Element(GetVernacularLanguagesResponse()), 'searchForAnyMatchPaged': xsd.Element(SearchForAnyMatchPaged()), 'searchForAnyMatchPagedResponse': xsd.Element(SearchForAnyMatchPagedResponse()), 'getAnyMatchCount': xsd.Element(GetAnyMatchCount()), 'getAnyMatchCountResponse': xsd.Element(GetAnyMatchCountResponse()), 'getLSIDFromTSN': xsd.Element(GetLSIDFromTSN()), 'getLSIDFromTSNResponse': xsd.Element(GetLSIDFromTSNResponse()), 'getTSNFromLSID': xsd.Element(GetTSNFromLSID()), 'getTSNFromLSIDResponse': xsd.Element(GetTSNFromLSIDResponse()), 'getDescription': xsd.Element(GetDescription()), 'getDescriptionResponse': xsd.Element(GetDescriptionResponse())},
)


##############################################################################
# Methods


getKingdomNameFromTSN_method = xsd.Method(
    soapAction='urn:getKingdomNameFromTSN',
    input='getKingdomNameFromTSN',
    inputPartName='parameters',
    output='getKingdomNameFromTSNResponse',
    outputPartName='parameters',
    operationName='getKingdomNameFromTSN',
    style='document',
)


getFullRecordFromTSN_method = xsd.Method(
    soapAction='urn:getFullRecordFromTSN',
    input='getFullRecordFromTSN',
    inputPartName='parameters',
    output='getFullRecordFromTSNResponse',
    outputPartName='parameters',
    operationName='getFullRecordFromTSN',
    style='document',
)


getRankNames_method = xsd.Method(
    soapAction='urn:getRankNames',
    input='getRankNames',
    inputPartName='parameters',
    output='getRankNamesResponse',
    outputPartName='parameters',
    operationName='getRankNames',
    style='document',
)


getGeographicValues_method = xsd.Method(
    soapAction='urn:getGeographicValues',
    input='getGeographicValues',
    inputPartName='parameters',
    output='getGeographicValuesResponse',
    outputPartName='parameters',
    operationName='getGeographicValues',
    style='document',
)


getITISTerms_method = xsd.Method(
    soapAction='urn:getITISTerms',
    input='getITISTerms',
    inputPartName='parameters',
    output='getITISTermsResponse',
    outputPartName='parameters',
    operationName='getITISTerms',
    style='document',
)


getDescription_method = xsd.Method(
    soapAction='urn:getDescription',
    input='getDescription',
    inputPartName='parameters',
    output='getDescriptionResponse',
    outputPartName='parameters',
    operationName='getDescription',
    style='document',
)


getTaxonAuthorshipFromTSN_method = xsd.Method(
    soapAction='urn:getTaxonAuthorshipFromTSN',
    input='getTaxonAuthorshipFromTSN',
    inputPartName='parameters',
    output='getTaxonAuthorshipFromTSNResponse',
    outputPartName='parameters',
    operationName='getTaxonAuthorshipFromTSN',
    style='document',
)


searchByCommonNameBeginsWith_method = xsd.Method(
    soapAction='urn:searchByCommonNameBeginsWith',
    input='searchByCommonNameBeginsWith',
    inputPartName='parameters',
    output='searchByCommonNameBeginsWithResponse',
    outputPartName='parameters',
    operationName='searchByCommonNameBeginsWith',
    style='document',
)


getTaxonomicUsageFromTSN_method = xsd.Method(
    soapAction='urn:getTaxonomicUsageFromTSN',
    input='getTaxonomicUsageFromTSN',
    inputPartName='parameters',
    output='getTaxonomicUsageFromTSNResponse',
    outputPartName='parameters',
    operationName='getTaxonomicUsageFromTSN',
    style='document',
)


getITISTermsFromCommonName_method = xsd.Method(
    soapAction='urn:getITISTermsFromCommonName',
    input='getITISTermsFromCommonName',
    inputPartName='parameters',
    output='getITISTermsFromCommonNameResponse',
    outputPartName='parameters',
    operationName='getITISTermsFromCommonName',
    style='document',
)


getFullHierarchyFromTSN_method = xsd.Method(
    soapAction='urn:getFullHierarchyFromTSN',
    input='getFullHierarchyFromTSN',
    inputPartName='parameters',
    output='getFullHierarchyFromTSNResponse',
    outputPartName='parameters',
    operationName='getFullHierarchyFromTSN',
    style='document',
)


getRecordFromLSID_method = xsd.Method(
    soapAction='urn:getRecordFromLSID',
    input='getRecordFromLSID',
    inputPartName='parameters',
    output='getRecordFromLSIDResponse',
    outputPartName='parameters',
    operationName='getRecordFromLSID',
    style='document',
)


getCurrencyFromTSN_method = xsd.Method(
    soapAction='urn:getCurrencyFromTSN',
    input='getCurrencyFromTSN',
    inputPartName='parameters',
    output='getCurrencyFromTSNResponse',
    outputPartName='parameters',
    operationName='getCurrencyFromTSN',
    style='document',
)


searchForAnyMatchPaged_method = xsd.Method(
    soapAction='urn:searchForAnyMatchPaged',
    input='searchForAnyMatchPaged',
    inputPartName='parameters',
    output='searchForAnyMatchPagedResponse',
    outputPartName='parameters',
    operationName='searchForAnyMatchPaged',
    style='document',
)


getUnacceptabilityReasonFromTSN_method = xsd.Method(
    soapAction='urn:getUnacceptabilityReasonFromTSN',
    input='getUnacceptabilityReasonFromTSN',
    inputPartName='parameters',
    output='getUnacceptabilityReasonFromTSNResponse',
    outputPartName='parameters',
    operationName='getUnacceptabilityReasonFromTSN',
    style='document',
)


getTsnByVernacularLanguage_method = xsd.Method(
    soapAction='urn:getTsnByVernacularLanguage',
    input='getTsnByVernacularLanguage',
    inputPartName='parameters',
    output='getTsnByVernacularLanguageResponse',
    outputPartName='parameters',
    operationName='getTsnByVernacularLanguage',
    style='document',
)


getSynonymNamesFromTSN_method = xsd.Method(
    soapAction='urn:getSynonymNamesFromTSN',
    input='getSynonymNamesFromTSN',
    inputPartName='parameters',
    output='getSynonymNamesFromTSNResponse',
    outputPartName='parameters',
    operationName='getSynonymNamesFromTSN',
    style='document',
)


searchByScientificNameExact_method = xsd.Method(
    soapAction='urn:searchByScientificNameExact',
    input='searchByScientificNameExact',
    inputPartName='parameters',
    output='searchByScientificNameExactResponse',
    outputPartName='parameters',
    operationName='searchByScientificNameExact',
    style='document',
)


searchByScientificNameBeginsWith_method = xsd.Method(
    soapAction='urn:searchByScientificNameBeginsWith',
    input='searchByScientificNameBeginsWith',
    inputPartName='parameters',
    output='searchByScientificNameBeginsWithResponse',
    outputPartName='parameters',
    operationName='searchByScientificNameBeginsWith',
    style='document',
)


getLastChangeDate_method = xsd.Method(
    soapAction='urn:getLastChangeDate',
    input='getLastChangeDate',
    inputPartName='parameters',
    output='getLastChangeDateResponse',
    outputPartName='parameters',
    operationName='getLastChangeDate',
    style='document',
)


getGlobalSpeciesCompletenessFromTSN_method = xsd.Method(
    soapAction='urn:getGlobalSpeciesCompletenessFromTSN',
    input='getGlobalSpeciesCompletenessFromTSN',
    inputPartName='parameters',
    output='getGlobalSpeciesCompletenessFromTSNResponse',
    outputPartName='parameters',
    operationName='getGlobalSpeciesCompletenessFromTSN',
    style='document',
)


getDateDataFromTSN_method = xsd.Method(
    soapAction='urn:getDateDataFromTSN',
    input='getDateDataFromTSN',
    inputPartName='parameters',
    output='getDateDataFromTSNResponse',
    outputPartName='parameters',
    operationName='getDateDataFromTSN',
    style='document',
)


searchByCommonName_method = xsd.Method(
    soapAction='urn:searchByCommonName',
    input='searchByCommonName',
    inputPartName='parameters',
    output='searchByCommonNameResponse',
    outputPartName='parameters',
    operationName='searchByCommonName',
    style='document',
)


getCommonNamesFromTSN_method = xsd.Method(
    soapAction='urn:getCommonNamesFromTSN',
    input='getCommonNamesFromTSN',
    inputPartName='parameters',
    output='getCommonNamesFromTSNResponse',
    outputPartName='parameters',
    operationName='getCommonNamesFromTSN',
    style='document',
)


searchByCommonNameEndsWith_method = xsd.Method(
    soapAction='urn:searchByCommonNameEndsWith',
    input='searchByCommonNameEndsWith',
    inputPartName='parameters',
    output='searchByCommonNameEndsWithResponse',
    outputPartName='parameters',
    operationName='searchByCommonNameEndsWith',
    style='document',
)


getScientificNameFromTSN_method = xsd.Method(
    soapAction='urn:getScientificNameFromTSN',
    input='getScientificNameFromTSN',
    inputPartName='parameters',
    output='getScientificNameFromTSNResponse',
    outputPartName='parameters',
    operationName='getScientificNameFromTSN',
    style='document',
)


getAnyMatchCount_method = xsd.Method(
    soapAction='urn:getAnyMatchCount',
    input='getAnyMatchCount',
    inputPartName='parameters',
    output='getAnyMatchCountResponse',
    outputPartName='parameters',
    operationName='getAnyMatchCount',
    style='document',
)


getTaxonomicRankNameFromTSN_method = xsd.Method(
    soapAction='urn:getTaxonomicRankNameFromTSN',
    input='getTaxonomicRankNameFromTSN',
    inputPartName='parameters',
    output='getTaxonomicRankNameFromTSNResponse',
    outputPartName='parameters',
    operationName='getTaxonomicRankNameFromTSN',
    style='document',
)


getAcceptedNamesFromTSN_method = xsd.Method(
    soapAction='urn:getAcceptedNamesFromTSN',
    input='getAcceptedNamesFromTSN',
    inputPartName='parameters',
    output='getAcceptedNamesFromTSNResponse',
    outputPartName='parameters',
    operationName='getAcceptedNamesFromTSN',
    style='document',
)


getJurisdictionalOriginFromTSN_method = xsd.Method(
    soapAction='urn:getJurisdictionalOriginFromTSN',
    input='getJurisdictionalOriginFromTSN',
    inputPartName='parameters',
    output='getJurisdictionalOriginFromTSNResponse',
    outputPartName='parameters',
    operationName='getJurisdictionalOriginFromTSN',
    style='document',
)


searchByScientificNameContains_method = xsd.Method(
    soapAction='urn:searchByScientificNameContains',
    input='searchByScientificNameContains',
    inputPartName='parameters',
    output='searchByScientificNameContainsResponse',
    outputPartName='parameters',
    operationName='searchByScientificNameContains',
    style='document',
)


getPublicationsFromTSN_method = xsd.Method(
    soapAction='urn:getPublicationsFromTSN',
    input='getPublicationsFromTSN',
    inputPartName='parameters',
    output='getPublicationsFromTSNResponse',
    outputPartName='parameters',
    operationName='getPublicationsFromTSN',
    style='document',
)


getITISTermsFromScientificName_method = xsd.Method(
    soapAction='urn:getITISTermsFromScientificName',
    input='getITISTermsFromScientificName',
    inputPartName='parameters',
    output='getITISTermsFromScientificNameResponse',
    outputPartName='parameters',
    operationName='getITISTermsFromScientificName',
    style='document',
)


getHierarchyUpFromTSN_method = xsd.Method(
    soapAction='urn:getHierarchyUpFromTSN',
    input='getHierarchyUpFromTSN',
    inputPartName='parameters',
    output='getHierarchyUpFromTSNResponse',
    outputPartName='parameters',
    operationName='getHierarchyUpFromTSN',
    style='document',
)


getReviewYearFromTSN_method = xsd.Method(
    soapAction='urn:getReviewYearFromTSN',
    input='getReviewYearFromTSN',
    inputPartName='parameters',
    output='getReviewYearFromTSNResponse',
    outputPartName='parameters',
    operationName='getReviewYearFromTSN',
    style='document',
)


getJurisdictionalOriginValues_method = xsd.Method(
    soapAction='urn:getJurisdictionalOriginValues',
    input='getJurisdictionalOriginValues',
    inputPartName='parameters',
    output='getJurisdictionalOriginValuesResponse',
    outputPartName='parameters',
    operationName='getJurisdictionalOriginValues',
    style='document',
)


getLSIDFromTSN_method = xsd.Method(
    soapAction='urn:getLSIDFromTSN',
    input='getLSIDFromTSN',
    inputPartName='parameters',
    output='getLSIDFromTSNResponse',
    outputPartName='parameters',
    operationName='getLSIDFromTSN',
    style='document',
)


getTSNFromLSID_method = xsd.Method(
    soapAction='urn:getTSNFromLSID',
    input='getTSNFromLSID',
    inputPartName='parameters',
    output='getTSNFromLSIDResponse',
    outputPartName='parameters',
    operationName='getTSNFromLSID',
    style='document',
)


getKingdomNames_method = xsd.Method(
    soapAction='urn:getKingdomNames',
    input='getKingdomNames',
    inputPartName='parameters',
    output='getKingdomNamesResponse',
    outputPartName='parameters',
    operationName='getKingdomNames',
    style='document',
)


getGeographicDivisionsFromTSN_method = xsd.Method(
    soapAction='urn:getGeographicDivisionsFromTSN',
    input='getGeographicDivisionsFromTSN',
    inputPartName='parameters',
    output='getGeographicDivisionsFromTSNResponse',
    outputPartName='parameters',
    operationName='getGeographicDivisionsFromTSN',
    style='document',
)


getCredibilityRatingFromTSN_method = xsd.Method(
    soapAction='urn:getCredibilityRatingFromTSN',
    input='getCredibilityRatingFromTSN',
    inputPartName='parameters',
    output='getCredibilityRatingFromTSNResponse',
    outputPartName='parameters',
    operationName='getCredibilityRatingFromTSN',
    style='document',
)


getOtherSourcesFromTSN_method = xsd.Method(
    soapAction='urn:getOtherSourcesFromTSN',
    input='getOtherSourcesFromTSN',
    inputPartName='parameters',
    output='getOtherSourcesFromTSNResponse',
    outputPartName='parameters',
    operationName='getOtherSourcesFromTSN',
    style='document',
)


getHierarchyDownFromTSN_method = xsd.Method(
    soapAction='urn:getHierarchyDownFromTSN',
    input='getHierarchyDownFromTSN',
    inputPartName='parameters',
    output='getHierarchyDownFromTSNResponse',
    outputPartName='parameters',
    operationName='getHierarchyDownFromTSN',
    style='document',
)


getCommentDetailFromTSN_method = xsd.Method(
    soapAction='urn:getCommentDetailFromTSN',
    input='getCommentDetailFromTSN',
    inputPartName='parameters',
    output='getCommentDetailFromTSNResponse',
    outputPartName='parameters',
    operationName='getCommentDetailFromTSN',
    style='document',
)


getCredibilityRatings_method = xsd.Method(
    soapAction='urn:getCredibilityRatings',
    input='getCredibilityRatings',
    inputPartName='parameters',
    output='getCredibilityRatingsResponse',
    outputPartName='parameters',
    operationName='getCredibilityRatings',
    style='document',
)


getVernacularLanguages_method = xsd.Method(
    soapAction='urn:getVernacularLanguages',
    input='getVernacularLanguages',
    inputPartName='parameters',
    output='getVernacularLanguagesResponse',
    outputPartName='parameters',
    operationName='getVernacularLanguages',
    style='document',
)


getCoreMetadataFromTSN_method = xsd.Method(
    soapAction='urn:getCoreMetadataFromTSN',
    input='getCoreMetadataFromTSN',
    inputPartName='parameters',
    output='getCoreMetadataFromTSNResponse',
    outputPartName='parameters',
    operationName='getCoreMetadataFromTSN',
    style='document',
)


getParentTSNFromTSN_method = xsd.Method(
    soapAction='urn:getParentTSNFromTSN',
    input='getParentTSNFromTSN',
    inputPartName='parameters',
    output='getParentTSNFromTSNResponse',
    outputPartName='parameters',
    operationName='getParentTSNFromTSN',
    style='document',
)


getJurisdictionValues_method = xsd.Method(
    soapAction='urn:getJurisdictionValues',
    input='getJurisdictionValues',
    inputPartName='parameters',
    output='getJurisdictionValuesResponse',
    outputPartName='parameters',
    operationName='getJurisdictionValues',
    style='document',
)


searchByScientificNameEndsWith_method = xsd.Method(
    soapAction='urn:searchByScientificNameEndsWith',
    input='searchByScientificNameEndsWith',
    inputPartName='parameters',
    output='searchByScientificNameEndsWithResponse',
    outputPartName='parameters',
    operationName='searchByScientificNameEndsWith',
    style='document',
)


getFullRecordFromLSID_method = xsd.Method(
    soapAction='urn:getFullRecordFromLSID',
    input='getFullRecordFromLSID',
    inputPartName='parameters',
    output='getFullRecordFromLSIDResponse',
    outputPartName='parameters',
    operationName='getFullRecordFromLSID',
    style='document',
)


searchForAnyMatch_method = xsd.Method(
    soapAction='urn:searchForAnyMatch',
    input='searchForAnyMatch',
    inputPartName='parameters',
    output='searchForAnyMatchResponse',
    outputPartName='parameters',
    operationName='searchForAnyMatch',
    style='document',
)


getCoverageFromTSN_method = xsd.Method(
    soapAction='urn:getCoverageFromTSN',
    input='getCoverageFromTSN',
    inputPartName='parameters',
    output='getCoverageFromTSNResponse',
    outputPartName='parameters',
    operationName='getCoverageFromTSN',
    style='document',
)


searchByScientificName_method = xsd.Method(
    soapAction='urn:searchByScientificName',
    input='searchByScientificName',
    inputPartName='parameters',
    output='searchByScientificNameResponse',
    outputPartName='parameters',
    operationName='searchByScientificName',
    style='document',
)


getExpertsFromTSN_method = xsd.Method(
    soapAction='urn:getExpertsFromTSN',
    input='getExpertsFromTSN',
    inputPartName='parameters',
    output='getExpertsFromTSNResponse',
    outputPartName='parameters',
    operationName='getExpertsFromTSN',
    style='document',
)


##############################################################################
# SOAP Service


ITISServiceHttpsSoap11Endpoint_SERVICE = soap.Service(
    name='ITISServiceHttpsSoap11Endpoint',
    targetNamespace='http://itis_service.itis.usgs.gov',
    location='{scheme}://{host}/ITISWebService/services/ITISService.ITISServiceHttpsSoap11Endpoint/',
    schemas=[Schema_04205, Schema_72759, Schema_91835, Schema_4c569],
    version=soap.SOAPVersion.SOAP12,
    methods=[getKingdomNameFromTSN_method, getFullRecordFromTSN_method, getRankNames_method, getGeographicValues_method, getITISTerms_method, getDescription_method, getTaxonAuthorshipFromTSN_method, searchByCommonNameBeginsWith_method, getTaxonomicUsageFromTSN_method, getITISTermsFromCommonName_method, getFullHierarchyFromTSN_method, getRecordFromLSID_method, getCurrencyFromTSN_method, searchForAnyMatchPaged_method, getUnacceptabilityReasonFromTSN_method, getTsnByVernacularLanguage_method, getSynonymNamesFromTSN_method, searchByScientificNameExact_method, searchByScientificNameBeginsWith_method, getLastChangeDate_method, getGlobalSpeciesCompletenessFromTSN_method, getDateDataFromTSN_method, searchByCommonName_method, getCommonNamesFromTSN_method, searchByCommonNameEndsWith_method, getScientificNameFromTSN_method, getAnyMatchCount_method, getTaxonomicRankNameFromTSN_method, getAcceptedNamesFromTSN_method, getJurisdictionalOriginFromTSN_method, searchByScientificNameContains_method, getPublicationsFromTSN_method, getITISTermsFromScientificName_method, getHierarchyUpFromTSN_method, getReviewYearFromTSN_method, getJurisdictionalOriginValues_method, getLSIDFromTSN_method, getTSNFromLSID_method, getKingdomNames_method, getGeographicDivisionsFromTSN_method, getCredibilityRatingFromTSN_method, getOtherSourcesFromTSN_method, getHierarchyDownFromTSN_method, getCommentDetailFromTSN_method, getCredibilityRatings_method, getVernacularLanguages_method, getCoreMetadataFromTSN_method, getParentTSNFromTSN_method, getJurisdictionValues_method, searchByScientificNameEndsWith_method, getFullRecordFromLSID_method, searchForAnyMatch_method, getCoverageFromTSN_method, searchByScientificName_method, getExpertsFromTSN_method],
)


##############################################################################
# SOAP Service Stub


class ITISServiceHttpsSoap11EndpointServiceStub(soap.Stub):
    SERVICE = ITISServiceHttpsSoap11Endpoint_SERVICE
    SCHEME = ''
    HOST = ''

    def getKingdomNameFromTSN(self, getKingdomNameFromTSN, header=None):
        return self.call('getKingdomNameFromTSN', getKingdomNameFromTSN, header=header)

    def getFullRecordFromTSN(self, getFullRecordFromTSN, header=None):
        return self.call('getFullRecordFromTSN', getFullRecordFromTSN, header=header)

    def getRankNames(self, getRankNames, header=None):
        return self.call('getRankNames', getRankNames, header=header)

    def getGeographicValues(self, getGeographicValues, header=None):
        return self.call('getGeographicValues', getGeographicValues, header=header)

    def getITISTerms(self, getITISTerms, header=None):
        return self.call('getITISTerms', getITISTerms, header=header)

    def getDescription(self, getDescription, header=None):
        return self.call('getDescription', getDescription, header=header)

    def getTaxonAuthorshipFromTSN(self, getTaxonAuthorshipFromTSN, header=None):
        return self.call('getTaxonAuthorshipFromTSN', getTaxonAuthorshipFromTSN, header=header)

    def searchByCommonNameBeginsWith(self, searchByCommonNameBeginsWith, header=None):
        return self.call('searchByCommonNameBeginsWith', searchByCommonNameBeginsWith, header=header)

    def getTaxonomicUsageFromTSN(self, getTaxonomicUsageFromTSN, header=None):
        return self.call('getTaxonomicUsageFromTSN', getTaxonomicUsageFromTSN, header=header)

    def getITISTermsFromCommonName(self, getITISTermsFromCommonName, header=None):
        return self.call('getITISTermsFromCommonName', getITISTermsFromCommonName, header=header)

    def getFullHierarchyFromTSN(self, getFullHierarchyFromTSN, header=None):
        return self.call('getFullHierarchyFromTSN', getFullHierarchyFromTSN, header=header)

    def getRecordFromLSID(self, getRecordFromLSID, header=None):
        return self.call('getRecordFromLSID', getRecordFromLSID, header=header)

    def getCurrencyFromTSN(self, getCurrencyFromTSN, header=None):
        return self.call('getCurrencyFromTSN', getCurrencyFromTSN, header=header)

    def searchForAnyMatchPaged(self, searchForAnyMatchPaged, header=None):
        return self.call('searchForAnyMatchPaged', searchForAnyMatchPaged, header=header)

    def getUnacceptabilityReasonFromTSN(self, getUnacceptabilityReasonFromTSN, header=None):
        return self.call('getUnacceptabilityReasonFromTSN', getUnacceptabilityReasonFromTSN, header=header)

    def getTsnByVernacularLanguage(self, getTsnByVernacularLanguage, header=None):
        return self.call('getTsnByVernacularLanguage', getTsnByVernacularLanguage, header=header)

    def getSynonymNamesFromTSN(self, getSynonymNamesFromTSN, header=None):
        return self.call('getSynonymNamesFromTSN', getSynonymNamesFromTSN, header=header)

    def searchByScientificNameExact(self, searchByScientificNameExact, header=None):
        return self.call('searchByScientificNameExact', searchByScientificNameExact, header=header)

    def searchByScientificNameBeginsWith(self, searchByScientificNameBeginsWith, header=None):
        return self.call('searchByScientificNameBeginsWith', searchByScientificNameBeginsWith, header=header)

    def getLastChangeDate(self, getLastChangeDate, header=None):
        return self.call('getLastChangeDate', getLastChangeDate, header=header)

    def getGlobalSpeciesCompletenessFromTSN(self, getGlobalSpeciesCompletenessFromTSN, header=None):
        return self.call('getGlobalSpeciesCompletenessFromTSN', getGlobalSpeciesCompletenessFromTSN, header=header)

    def getDateDataFromTSN(self, getDateDataFromTSN, header=None):
        return self.call('getDateDataFromTSN', getDateDataFromTSN, header=header)

    def searchByCommonName(self, searchByCommonName, header=None):
        return self.call('searchByCommonName', searchByCommonName, header=header)

    def getCommonNamesFromTSN(self, getCommonNamesFromTSN, header=None):
        return self.call('getCommonNamesFromTSN', getCommonNamesFromTSN, header=header)

    def searchByCommonNameEndsWith(self, searchByCommonNameEndsWith, header=None):
        return self.call('searchByCommonNameEndsWith', searchByCommonNameEndsWith, header=header)

    def getScientificNameFromTSN(self, getScientificNameFromTSN, header=None):
        return self.call('getScientificNameFromTSN', getScientificNameFromTSN, header=header)

    def getAnyMatchCount(self, getAnyMatchCount, header=None):
        return self.call('getAnyMatchCount', getAnyMatchCount, header=header)

    def getTaxonomicRankNameFromTSN(self, getTaxonomicRankNameFromTSN, header=None):
        return self.call('getTaxonomicRankNameFromTSN', getTaxonomicRankNameFromTSN, header=header)

    def getAcceptedNamesFromTSN(self, getAcceptedNamesFromTSN, header=None):
        return self.call('getAcceptedNamesFromTSN', getAcceptedNamesFromTSN, header=header)

    def getJurisdictionalOriginFromTSN(self, getJurisdictionalOriginFromTSN, header=None):
        return self.call('getJurisdictionalOriginFromTSN', getJurisdictionalOriginFromTSN, header=header)

    def searchByScientificNameContains(self, searchByScientificNameContains, header=None):
        return self.call('searchByScientificNameContains', searchByScientificNameContains, header=header)

    def getPublicationsFromTSN(self, getPublicationsFromTSN, header=None):
        return self.call('getPublicationsFromTSN', getPublicationsFromTSN, header=header)

    def getITISTermsFromScientificName(self, getITISTermsFromScientificName, header=None):
        return self.call('getITISTermsFromScientificName', getITISTermsFromScientificName, header=header)

    def getHierarchyUpFromTSN(self, getHierarchyUpFromTSN, header=None):
        return self.call('getHierarchyUpFromTSN', getHierarchyUpFromTSN, header=header)

    def getReviewYearFromTSN(self, getReviewYearFromTSN, header=None):
        return self.call('getReviewYearFromTSN', getReviewYearFromTSN, header=header)

    def getJurisdictionalOriginValues(self, getJurisdictionalOriginValues, header=None):
        return self.call('getJurisdictionalOriginValues', getJurisdictionalOriginValues, header=header)

    def getLSIDFromTSN(self, getLSIDFromTSN, header=None):
        return self.call('getLSIDFromTSN', getLSIDFromTSN, header=header)

    def getTSNFromLSID(self, getTSNFromLSID, header=None):
        return self.call('getTSNFromLSID', getTSNFromLSID, header=header)

    def getKingdomNames(self, getKingdomNames, header=None):
        return self.call('getKingdomNames', getKingdomNames, header=header)

    def getGeographicDivisionsFromTSN(self, getGeographicDivisionsFromTSN, header=None):
        return self.call('getGeographicDivisionsFromTSN', getGeographicDivisionsFromTSN, header=header)

    def getCredibilityRatingFromTSN(self, getCredibilityRatingFromTSN, header=None):
        return self.call('getCredibilityRatingFromTSN', getCredibilityRatingFromTSN, header=header)

    def getOtherSourcesFromTSN(self, getOtherSourcesFromTSN, header=None):
        return self.call('getOtherSourcesFromTSN', getOtherSourcesFromTSN, header=header)

    def getHierarchyDownFromTSN(self, getHierarchyDownFromTSN, header=None):
        return self.call('getHierarchyDownFromTSN', getHierarchyDownFromTSN, header=header)

    def getCommentDetailFromTSN(self, getCommentDetailFromTSN, header=None):
        return self.call('getCommentDetailFromTSN', getCommentDetailFromTSN, header=header)

    def getCredibilityRatings(self, getCredibilityRatings, header=None):
        return self.call('getCredibilityRatings', getCredibilityRatings, header=header)

    def getVernacularLanguages(self, getVernacularLanguages, header=None):
        return self.call('getVernacularLanguages', getVernacularLanguages, header=header)

    def getCoreMetadataFromTSN(self, getCoreMetadataFromTSN, header=None):
        return self.call('getCoreMetadataFromTSN', getCoreMetadataFromTSN, header=header)

    def getParentTSNFromTSN(self, getParentTSNFromTSN, header=None):
        return self.call('getParentTSNFromTSN', getParentTSNFromTSN, header=header)

    def getJurisdictionValues(self, getJurisdictionValues, header=None):
        return self.call('getJurisdictionValues', getJurisdictionValues, header=header)

    def searchByScientificNameEndsWith(self, searchByScientificNameEndsWith, header=None):
        return self.call('searchByScientificNameEndsWith', searchByScientificNameEndsWith, header=header)

    def getFullRecordFromLSID(self, getFullRecordFromLSID, header=None):
        return self.call('getFullRecordFromLSID', getFullRecordFromLSID, header=header)

    def searchForAnyMatch(self, searchForAnyMatch, header=None):
        return self.call('searchForAnyMatch', searchForAnyMatch, header=header)

    def getCoverageFromTSN(self, getCoverageFromTSN, header=None):
        return self.call('getCoverageFromTSN', getCoverageFromTSN, header=header)

    def searchByScientificName(self, searchByScientificName, header=None):
        return self.call('searchByScientificName', searchByScientificName, header=header)

    def getExpertsFromTSN(self, getExpertsFromTSN, header=None):
        return self.call('getExpertsFromTSN', getExpertsFromTSN, header=header)

##############################################################################
# Methods


getKingdomNameFromTSN_method = xsd.Method(
    soapAction='urn:getKingdomNameFromTSN',
    input='getKingdomNameFromTSN',
    inputPartName='parameters',
    output='getKingdomNameFromTSNResponse',
    outputPartName='parameters',
    operationName='getKingdomNameFromTSN',
    style='document',
)


getFullRecordFromTSN_method = xsd.Method(
    soapAction='urn:getFullRecordFromTSN',
    input='getFullRecordFromTSN',
    inputPartName='parameters',
    output='getFullRecordFromTSNResponse',
    outputPartName='parameters',
    operationName='getFullRecordFromTSN',
    style='document',
)


getRankNames_method = xsd.Method(
    soapAction='urn:getRankNames',
    input='getRankNames',
    inputPartName='parameters',
    output='getRankNamesResponse',
    outputPartName='parameters',
    operationName='getRankNames',
    style='document',
)


getGeographicValues_method = xsd.Method(
    soapAction='urn:getGeographicValues',
    input='getGeographicValues',
    inputPartName='parameters',
    output='getGeographicValuesResponse',
    outputPartName='parameters',
    operationName='getGeographicValues',
    style='document',
)


getITISTerms_method = xsd.Method(
    soapAction='urn:getITISTerms',
    input='getITISTerms',
    inputPartName='parameters',
    output='getITISTermsResponse',
    outputPartName='parameters',
    operationName='getITISTerms',
    style='document',
)


getDescription_method = xsd.Method(
    soapAction='urn:getDescription',
    input='getDescription',
    inputPartName='parameters',
    output='getDescriptionResponse',
    outputPartName='parameters',
    operationName='getDescription',
    style='document',
)


getTaxonAuthorshipFromTSN_method = xsd.Method(
    soapAction='urn:getTaxonAuthorshipFromTSN',
    input='getTaxonAuthorshipFromTSN',
    inputPartName='parameters',
    output='getTaxonAuthorshipFromTSNResponse',
    outputPartName='parameters',
    operationName='getTaxonAuthorshipFromTSN',
    style='document',
)


searchByCommonNameBeginsWith_method = xsd.Method(
    soapAction='urn:searchByCommonNameBeginsWith',
    input='searchByCommonNameBeginsWith',
    inputPartName='parameters',
    output='searchByCommonNameBeginsWithResponse',
    outputPartName='parameters',
    operationName='searchByCommonNameBeginsWith',
    style='document',
)


getTaxonomicUsageFromTSN_method = xsd.Method(
    soapAction='urn:getTaxonomicUsageFromTSN',
    input='getTaxonomicUsageFromTSN',
    inputPartName='parameters',
    output='getTaxonomicUsageFromTSNResponse',
    outputPartName='parameters',
    operationName='getTaxonomicUsageFromTSN',
    style='document',
)


getITISTermsFromCommonName_method = xsd.Method(
    soapAction='urn:getITISTermsFromCommonName',
    input='getITISTermsFromCommonName',
    inputPartName='parameters',
    output='getITISTermsFromCommonNameResponse',
    outputPartName='parameters',
    operationName='getITISTermsFromCommonName',
    style='document',
)


getFullHierarchyFromTSN_method = xsd.Method(
    soapAction='urn:getFullHierarchyFromTSN',
    input='getFullHierarchyFromTSN',
    inputPartName='parameters',
    output='getFullHierarchyFromTSNResponse',
    outputPartName='parameters',
    operationName='getFullHierarchyFromTSN',
    style='document',
)


getRecordFromLSID_method = xsd.Method(
    soapAction='urn:getRecordFromLSID',
    input='getRecordFromLSID',
    inputPartName='parameters',
    output='getRecordFromLSIDResponse',
    outputPartName='parameters',
    operationName='getRecordFromLSID',
    style='document',
)


getCurrencyFromTSN_method = xsd.Method(
    soapAction='urn:getCurrencyFromTSN',
    input='getCurrencyFromTSN',
    inputPartName='parameters',
    output='getCurrencyFromTSNResponse',
    outputPartName='parameters',
    operationName='getCurrencyFromTSN',
    style='document',
)


searchForAnyMatchPaged_method = xsd.Method(
    soapAction='urn:searchForAnyMatchPaged',
    input='searchForAnyMatchPaged',
    inputPartName='parameters',
    output='searchForAnyMatchPagedResponse',
    outputPartName='parameters',
    operationName='searchForAnyMatchPaged',
    style='document',
)


getUnacceptabilityReasonFromTSN_method = xsd.Method(
    soapAction='urn:getUnacceptabilityReasonFromTSN',
    input='getUnacceptabilityReasonFromTSN',
    inputPartName='parameters',
    output='getUnacceptabilityReasonFromTSNResponse',
    outputPartName='parameters',
    operationName='getUnacceptabilityReasonFromTSN',
    style='document',
)


getTsnByVernacularLanguage_method = xsd.Method(
    soapAction='urn:getTsnByVernacularLanguage',
    input='getTsnByVernacularLanguage',
    inputPartName='parameters',
    output='getTsnByVernacularLanguageResponse',
    outputPartName='parameters',
    operationName='getTsnByVernacularLanguage',
    style='document',
)


getSynonymNamesFromTSN_method = xsd.Method(
    soapAction='urn:getSynonymNamesFromTSN',
    input='getSynonymNamesFromTSN',
    inputPartName='parameters',
    output='getSynonymNamesFromTSNResponse',
    outputPartName='parameters',
    operationName='getSynonymNamesFromTSN',
    style='document',
)


searchByScientificNameExact_method = xsd.Method(
    soapAction='urn:searchByScientificNameExact',
    input='searchByScientificNameExact',
    inputPartName='parameters',
    output='searchByScientificNameExactResponse',
    outputPartName='parameters',
    operationName='searchByScientificNameExact',
    style='document',
)


searchByScientificNameBeginsWith_method = xsd.Method(
    soapAction='urn:searchByScientificNameBeginsWith',
    input='searchByScientificNameBeginsWith',
    inputPartName='parameters',
    output='searchByScientificNameBeginsWithResponse',
    outputPartName='parameters',
    operationName='searchByScientificNameBeginsWith',
    style='document',
)


getLastChangeDate_method = xsd.Method(
    soapAction='urn:getLastChangeDate',
    input='getLastChangeDate',
    inputPartName='parameters',
    output='getLastChangeDateResponse',
    outputPartName='parameters',
    operationName='getLastChangeDate',
    style='document',
)


getGlobalSpeciesCompletenessFromTSN_method = xsd.Method(
    soapAction='urn:getGlobalSpeciesCompletenessFromTSN',
    input='getGlobalSpeciesCompletenessFromTSN',
    inputPartName='parameters',
    output='getGlobalSpeciesCompletenessFromTSNResponse',
    outputPartName='parameters',
    operationName='getGlobalSpeciesCompletenessFromTSN',
    style='document',
)


getDateDataFromTSN_method = xsd.Method(
    soapAction='urn:getDateDataFromTSN',
    input='getDateDataFromTSN',
    inputPartName='parameters',
    output='getDateDataFromTSNResponse',
    outputPartName='parameters',
    operationName='getDateDataFromTSN',
    style='document',
)


searchByCommonName_method = xsd.Method(
    soapAction='urn:searchByCommonName',
    input='searchByCommonName',
    inputPartName='parameters',
    output='searchByCommonNameResponse',
    outputPartName='parameters',
    operationName='searchByCommonName',
    style='document',
)


getCommonNamesFromTSN_method = xsd.Method(
    soapAction='urn:getCommonNamesFromTSN',
    input='getCommonNamesFromTSN',
    inputPartName='parameters',
    output='getCommonNamesFromTSNResponse',
    outputPartName='parameters',
    operationName='getCommonNamesFromTSN',
    style='document',
)


searchByCommonNameEndsWith_method = xsd.Method(
    soapAction='urn:searchByCommonNameEndsWith',
    input='searchByCommonNameEndsWith',
    inputPartName='parameters',
    output='searchByCommonNameEndsWithResponse',
    outputPartName='parameters',
    operationName='searchByCommonNameEndsWith',
    style='document',
)


getScientificNameFromTSN_method = xsd.Method(
    soapAction='urn:getScientificNameFromTSN',
    input='getScientificNameFromTSN',
    inputPartName='parameters',
    output='getScientificNameFromTSNResponse',
    outputPartName='parameters',
    operationName='getScientificNameFromTSN',
    style='document',
)


getAnyMatchCount_method = xsd.Method(
    soapAction='urn:getAnyMatchCount',
    input='getAnyMatchCount',
    inputPartName='parameters',
    output='getAnyMatchCountResponse',
    outputPartName='parameters',
    operationName='getAnyMatchCount',
    style='document',
)


getTaxonomicRankNameFromTSN_method = xsd.Method(
    soapAction='urn:getTaxonomicRankNameFromTSN',
    input='getTaxonomicRankNameFromTSN',
    inputPartName='parameters',
    output='getTaxonomicRankNameFromTSNResponse',
    outputPartName='parameters',
    operationName='getTaxonomicRankNameFromTSN',
    style='document',
)


getAcceptedNamesFromTSN_method = xsd.Method(
    soapAction='urn:getAcceptedNamesFromTSN',
    input='getAcceptedNamesFromTSN',
    inputPartName='parameters',
    output='getAcceptedNamesFromTSNResponse',
    outputPartName='parameters',
    operationName='getAcceptedNamesFromTSN',
    style='document',
)


getJurisdictionalOriginFromTSN_method = xsd.Method(
    soapAction='urn:getJurisdictionalOriginFromTSN',
    input='getJurisdictionalOriginFromTSN',
    inputPartName='parameters',
    output='getJurisdictionalOriginFromTSNResponse',
    outputPartName='parameters',
    operationName='getJurisdictionalOriginFromTSN',
    style='document',
)


searchByScientificNameContains_method = xsd.Method(
    soapAction='urn:searchByScientificNameContains',
    input='searchByScientificNameContains',
    inputPartName='parameters',
    output='searchByScientificNameContainsResponse',
    outputPartName='parameters',
    operationName='searchByScientificNameContains',
    style='document',
)


getPublicationsFromTSN_method = xsd.Method(
    soapAction='urn:getPublicationsFromTSN',
    input='getPublicationsFromTSN',
    inputPartName='parameters',
    output='getPublicationsFromTSNResponse',
    outputPartName='parameters',
    operationName='getPublicationsFromTSN',
    style='document',
)


getITISTermsFromScientificName_method = xsd.Method(
    soapAction='urn:getITISTermsFromScientificName',
    input='getITISTermsFromScientificName',
    inputPartName='parameters',
    output='getITISTermsFromScientificNameResponse',
    outputPartName='parameters',
    operationName='getITISTermsFromScientificName',
    style='document',
)


getHierarchyUpFromTSN_method = xsd.Method(
    soapAction='urn:getHierarchyUpFromTSN',
    input='getHierarchyUpFromTSN',
    inputPartName='parameters',
    output='getHierarchyUpFromTSNResponse',
    outputPartName='parameters',
    operationName='getHierarchyUpFromTSN',
    style='document',
)


getReviewYearFromTSN_method = xsd.Method(
    soapAction='urn:getReviewYearFromTSN',
    input='getReviewYearFromTSN',
    inputPartName='parameters',
    output='getReviewYearFromTSNResponse',
    outputPartName='parameters',
    operationName='getReviewYearFromTSN',
    style='document',
)


getJurisdictionalOriginValues_method = xsd.Method(
    soapAction='urn:getJurisdictionalOriginValues',
    input='getJurisdictionalOriginValues',
    inputPartName='parameters',
    output='getJurisdictionalOriginValuesResponse',
    outputPartName='parameters',
    operationName='getJurisdictionalOriginValues',
    style='document',
)


getLSIDFromTSN_method = xsd.Method(
    soapAction='urn:getLSIDFromTSN',
    input='getLSIDFromTSN',
    inputPartName='parameters',
    output='getLSIDFromTSNResponse',
    outputPartName='parameters',
    operationName='getLSIDFromTSN',
    style='document',
)


getTSNFromLSID_method = xsd.Method(
    soapAction='urn:getTSNFromLSID',
    input='getTSNFromLSID',
    inputPartName='parameters',
    output='getTSNFromLSIDResponse',
    outputPartName='parameters',
    operationName='getTSNFromLSID',
    style='document',
)


getKingdomNames_method = xsd.Method(
    soapAction='urn:getKingdomNames',
    input='getKingdomNames',
    inputPartName='parameters',
    output='getKingdomNamesResponse',
    outputPartName='parameters',
    operationName='getKingdomNames',
    style='document',
)


getGeographicDivisionsFromTSN_method = xsd.Method(
    soapAction='urn:getGeographicDivisionsFromTSN',
    input='getGeographicDivisionsFromTSN',
    inputPartName='parameters',
    output='getGeographicDivisionsFromTSNResponse',
    outputPartName='parameters',
    operationName='getGeographicDivisionsFromTSN',
    style='document',
)


getCredibilityRatingFromTSN_method = xsd.Method(
    soapAction='urn:getCredibilityRatingFromTSN',
    input='getCredibilityRatingFromTSN',
    inputPartName='parameters',
    output='getCredibilityRatingFromTSNResponse',
    outputPartName='parameters',
    operationName='getCredibilityRatingFromTSN',
    style='document',
)


getOtherSourcesFromTSN_method = xsd.Method(
    soapAction='urn:getOtherSourcesFromTSN',
    input='getOtherSourcesFromTSN',
    inputPartName='parameters',
    output='getOtherSourcesFromTSNResponse',
    outputPartName='parameters',
    operationName='getOtherSourcesFromTSN',
    style='document',
)


getHierarchyDownFromTSN_method = xsd.Method(
    soapAction='urn:getHierarchyDownFromTSN',
    input='getHierarchyDownFromTSN',
    inputPartName='parameters',
    output='getHierarchyDownFromTSNResponse',
    outputPartName='parameters',
    operationName='getHierarchyDownFromTSN',
    style='document',
)


getCommentDetailFromTSN_method = xsd.Method(
    soapAction='urn:getCommentDetailFromTSN',
    input='getCommentDetailFromTSN',
    inputPartName='parameters',
    output='getCommentDetailFromTSNResponse',
    outputPartName='parameters',
    operationName='getCommentDetailFromTSN',
    style='document',
)


getCredibilityRatings_method = xsd.Method(
    soapAction='urn:getCredibilityRatings',
    input='getCredibilityRatings',
    inputPartName='parameters',
    output='getCredibilityRatingsResponse',
    outputPartName='parameters',
    operationName='getCredibilityRatings',
    style='document',
)


getVernacularLanguages_method = xsd.Method(
    soapAction='urn:getVernacularLanguages',
    input='getVernacularLanguages',
    inputPartName='parameters',
    output='getVernacularLanguagesResponse',
    outputPartName='parameters',
    operationName='getVernacularLanguages',
    style='document',
)


getCoreMetadataFromTSN_method = xsd.Method(
    soapAction='urn:getCoreMetadataFromTSN',
    input='getCoreMetadataFromTSN',
    inputPartName='parameters',
    output='getCoreMetadataFromTSNResponse',
    outputPartName='parameters',
    operationName='getCoreMetadataFromTSN',
    style='document',
)


getParentTSNFromTSN_method = xsd.Method(
    soapAction='urn:getParentTSNFromTSN',
    input='getParentTSNFromTSN',
    inputPartName='parameters',
    output='getParentTSNFromTSNResponse',
    outputPartName='parameters',
    operationName='getParentTSNFromTSN',
    style='document',
)


getJurisdictionValues_method = xsd.Method(
    soapAction='urn:getJurisdictionValues',
    input='getJurisdictionValues',
    inputPartName='parameters',
    output='getJurisdictionValuesResponse',
    outputPartName='parameters',
    operationName='getJurisdictionValues',
    style='document',
)


searchByScientificNameEndsWith_method = xsd.Method(
    soapAction='urn:searchByScientificNameEndsWith',
    input='searchByScientificNameEndsWith',
    inputPartName='parameters',
    output='searchByScientificNameEndsWithResponse',
    outputPartName='parameters',
    operationName='searchByScientificNameEndsWith',
    style='document',
)


getFullRecordFromLSID_method = xsd.Method(
    soapAction='urn:getFullRecordFromLSID',
    input='getFullRecordFromLSID',
    inputPartName='parameters',
    output='getFullRecordFromLSIDResponse',
    outputPartName='parameters',
    operationName='getFullRecordFromLSID',
    style='document',
)


searchForAnyMatch_method = xsd.Method(
    soapAction='urn:searchForAnyMatch',
    input='searchForAnyMatch',
    inputPartName='parameters',
    output='searchForAnyMatchResponse',
    outputPartName='parameters',
    operationName='searchForAnyMatch',
    style='document',
)


getCoverageFromTSN_method = xsd.Method(
    soapAction='urn:getCoverageFromTSN',
    input='getCoverageFromTSN',
    inputPartName='parameters',
    output='getCoverageFromTSNResponse',
    outputPartName='parameters',
    operationName='getCoverageFromTSN',
    style='document',
)


searchByScientificName_method = xsd.Method(
    soapAction='urn:searchByScientificName',
    input='searchByScientificName',
    inputPartName='parameters',
    output='searchByScientificNameResponse',
    outputPartName='parameters',
    operationName='searchByScientificName',
    style='document',
)


getExpertsFromTSN_method = xsd.Method(
    soapAction='urn:getExpertsFromTSN',
    input='getExpertsFromTSN',
    inputPartName='parameters',
    output='getExpertsFromTSNResponse',
    outputPartName='parameters',
    operationName='getExpertsFromTSN',
    style='document',
)


##############################################################################
# SOAP Service


ITISServiceHttpsSoap12Endpoint_SERVICE = soap.Service(
    name='ITISServiceHttpsSoap12Endpoint',
    targetNamespace='http://itis_service.itis.usgs.gov',
    location='{scheme}://{host}/ITISWebService/services/ITISService.ITISServiceHttpsSoap12Endpoint/',
    schemas=[Schema_04205, Schema_72759, Schema_91835, Schema_4c569],
    version=soap.SOAPVersion.SOAP12,
    methods=[getKingdomNameFromTSN_method, getFullRecordFromTSN_method, getRankNames_method, getGeographicValues_method, getITISTerms_method, getDescription_method, getTaxonAuthorshipFromTSN_method, searchByCommonNameBeginsWith_method, getTaxonomicUsageFromTSN_method, getITISTermsFromCommonName_method, getFullHierarchyFromTSN_method, getRecordFromLSID_method, getCurrencyFromTSN_method, searchForAnyMatchPaged_method, getUnacceptabilityReasonFromTSN_method, getTsnByVernacularLanguage_method, getSynonymNamesFromTSN_method, searchByScientificNameExact_method, searchByScientificNameBeginsWith_method, getLastChangeDate_method, getGlobalSpeciesCompletenessFromTSN_method, getDateDataFromTSN_method, searchByCommonName_method, getCommonNamesFromTSN_method, searchByCommonNameEndsWith_method, getScientificNameFromTSN_method, getAnyMatchCount_method, getTaxonomicRankNameFromTSN_method, getAcceptedNamesFromTSN_method, getJurisdictionalOriginFromTSN_method, searchByScientificNameContains_method, getPublicationsFromTSN_method, getITISTermsFromScientificName_method, getHierarchyUpFromTSN_method, getReviewYearFromTSN_method, getJurisdictionalOriginValues_method, getLSIDFromTSN_method, getTSNFromLSID_method, getKingdomNames_method, getGeographicDivisionsFromTSN_method, getCredibilityRatingFromTSN_method, getOtherSourcesFromTSN_method, getHierarchyDownFromTSN_method, getCommentDetailFromTSN_method, getCredibilityRatings_method, getVernacularLanguages_method, getCoreMetadataFromTSN_method, getParentTSNFromTSN_method, getJurisdictionValues_method, searchByScientificNameEndsWith_method, getFullRecordFromLSID_method, searchForAnyMatch_method, getCoverageFromTSN_method, searchByScientificName_method, getExpertsFromTSN_method],
)


##############################################################################
# SOAP Service Stub


class ITISServiceHttpsSoap12EndpointServiceStub(soap.Stub):
    SERVICE = ITISServiceHttpsSoap12Endpoint_SERVICE
    SCHEME = ''
    HOST = ''

    def getKingdomNameFromTSN(self, getKingdomNameFromTSN, header=None):
        return self.call('getKingdomNameFromTSN', getKingdomNameFromTSN, header=header)

    def getFullRecordFromTSN(self, getFullRecordFromTSN, header=None):
        return self.call('getFullRecordFromTSN', getFullRecordFromTSN, header=header)

    def getRankNames(self, getRankNames, header=None):
        return self.call('getRankNames', getRankNames, header=header)

    def getGeographicValues(self, getGeographicValues, header=None):
        return self.call('getGeographicValues', getGeographicValues, header=header)

    def getITISTerms(self, getITISTerms, header=None):
        return self.call('getITISTerms', getITISTerms, header=header)

    def getDescription(self, getDescription, header=None):
        return self.call('getDescription', getDescription, header=header)

    def getTaxonAuthorshipFromTSN(self, getTaxonAuthorshipFromTSN, header=None):
        return self.call('getTaxonAuthorshipFromTSN', getTaxonAuthorshipFromTSN, header=header)

    def searchByCommonNameBeginsWith(self, searchByCommonNameBeginsWith, header=None):
        return self.call('searchByCommonNameBeginsWith', searchByCommonNameBeginsWith, header=header)

    def getTaxonomicUsageFromTSN(self, getTaxonomicUsageFromTSN, header=None):
        return self.call('getTaxonomicUsageFromTSN', getTaxonomicUsageFromTSN, header=header)

    def getITISTermsFromCommonName(self, getITISTermsFromCommonName, header=None):
        return self.call('getITISTermsFromCommonName', getITISTermsFromCommonName, header=header)

    def getFullHierarchyFromTSN(self, getFullHierarchyFromTSN, header=None):
        return self.call('getFullHierarchyFromTSN', getFullHierarchyFromTSN, header=header)

    def getRecordFromLSID(self, getRecordFromLSID, header=None):
        return self.call('getRecordFromLSID', getRecordFromLSID, header=header)

    def getCurrencyFromTSN(self, getCurrencyFromTSN, header=None):
        return self.call('getCurrencyFromTSN', getCurrencyFromTSN, header=header)

    def searchForAnyMatchPaged(self, searchForAnyMatchPaged, header=None):
        return self.call('searchForAnyMatchPaged', searchForAnyMatchPaged, header=header)

    def getUnacceptabilityReasonFromTSN(self, getUnacceptabilityReasonFromTSN, header=None):
        return self.call('getUnacceptabilityReasonFromTSN', getUnacceptabilityReasonFromTSN, header=header)

    def getTsnByVernacularLanguage(self, getTsnByVernacularLanguage, header=None):
        return self.call('getTsnByVernacularLanguage', getTsnByVernacularLanguage, header=header)

    def getSynonymNamesFromTSN(self, getSynonymNamesFromTSN, header=None):
        return self.call('getSynonymNamesFromTSN', getSynonymNamesFromTSN, header=header)

    def searchByScientificNameExact(self, searchByScientificNameExact, header=None):
        return self.call('searchByScientificNameExact', searchByScientificNameExact, header=header)

    def searchByScientificNameBeginsWith(self, searchByScientificNameBeginsWith, header=None):
        return self.call('searchByScientificNameBeginsWith', searchByScientificNameBeginsWith, header=header)

    def getLastChangeDate(self, getLastChangeDate, header=None):
        return self.call('getLastChangeDate', getLastChangeDate, header=header)

    def getGlobalSpeciesCompletenessFromTSN(self, getGlobalSpeciesCompletenessFromTSN, header=None):
        return self.call('getGlobalSpeciesCompletenessFromTSN', getGlobalSpeciesCompletenessFromTSN, header=header)

    def getDateDataFromTSN(self, getDateDataFromTSN, header=None):
        return self.call('getDateDataFromTSN', getDateDataFromTSN, header=header)

    def searchByCommonName(self, searchByCommonName, header=None):
        return self.call('searchByCommonName', searchByCommonName, header=header)

    def getCommonNamesFromTSN(self, getCommonNamesFromTSN, header=None):
        return self.call('getCommonNamesFromTSN', getCommonNamesFromTSN, header=header)

    def searchByCommonNameEndsWith(self, searchByCommonNameEndsWith, header=None):
        return self.call('searchByCommonNameEndsWith', searchByCommonNameEndsWith, header=header)

    def getScientificNameFromTSN(self, getScientificNameFromTSN, header=None):
        return self.call('getScientificNameFromTSN', getScientificNameFromTSN, header=header)

    def getAnyMatchCount(self, getAnyMatchCount, header=None):
        return self.call('getAnyMatchCount', getAnyMatchCount, header=header)

    def getTaxonomicRankNameFromTSN(self, getTaxonomicRankNameFromTSN, header=None):
        return self.call('getTaxonomicRankNameFromTSN', getTaxonomicRankNameFromTSN, header=header)

    def getAcceptedNamesFromTSN(self, getAcceptedNamesFromTSN, header=None):
        return self.call('getAcceptedNamesFromTSN', getAcceptedNamesFromTSN, header=header)

    def getJurisdictionalOriginFromTSN(self, getJurisdictionalOriginFromTSN, header=None):
        return self.call('getJurisdictionalOriginFromTSN', getJurisdictionalOriginFromTSN, header=header)

    def searchByScientificNameContains(self, searchByScientificNameContains, header=None):
        return self.call('searchByScientificNameContains', searchByScientificNameContains, header=header)

    def getPublicationsFromTSN(self, getPublicationsFromTSN, header=None):
        return self.call('getPublicationsFromTSN', getPublicationsFromTSN, header=header)

    def getITISTermsFromScientificName(self, getITISTermsFromScientificName, header=None):
        return self.call('getITISTermsFromScientificName', getITISTermsFromScientificName, header=header)

    def getHierarchyUpFromTSN(self, getHierarchyUpFromTSN, header=None):
        return self.call('getHierarchyUpFromTSN', getHierarchyUpFromTSN, header=header)

    def getReviewYearFromTSN(self, getReviewYearFromTSN, header=None):
        return self.call('getReviewYearFromTSN', getReviewYearFromTSN, header=header)

    def getJurisdictionalOriginValues(self, getJurisdictionalOriginValues, header=None):
        return self.call('getJurisdictionalOriginValues', getJurisdictionalOriginValues, header=header)

    def getLSIDFromTSN(self, getLSIDFromTSN, header=None):
        return self.call('getLSIDFromTSN', getLSIDFromTSN, header=header)

    def getTSNFromLSID(self, getTSNFromLSID, header=None):
        return self.call('getTSNFromLSID', getTSNFromLSID, header=header)

    def getKingdomNames(self, getKingdomNames, header=None):
        return self.call('getKingdomNames', getKingdomNames, header=header)

    def getGeographicDivisionsFromTSN(self, getGeographicDivisionsFromTSN, header=None):
        return self.call('getGeographicDivisionsFromTSN', getGeographicDivisionsFromTSN, header=header)

    def getCredibilityRatingFromTSN(self, getCredibilityRatingFromTSN, header=None):
        return self.call('getCredibilityRatingFromTSN', getCredibilityRatingFromTSN, header=header)

    def getOtherSourcesFromTSN(self, getOtherSourcesFromTSN, header=None):
        return self.call('getOtherSourcesFromTSN', getOtherSourcesFromTSN, header=header)

    def getHierarchyDownFromTSN(self, getHierarchyDownFromTSN, header=None):
        return self.call('getHierarchyDownFromTSN', getHierarchyDownFromTSN, header=header)

    def getCommentDetailFromTSN(self, getCommentDetailFromTSN, header=None):
        return self.call('getCommentDetailFromTSN', getCommentDetailFromTSN, header=header)

    def getCredibilityRatings(self, getCredibilityRatings, header=None):
        return self.call('getCredibilityRatings', getCredibilityRatings, header=header)

    def getVernacularLanguages(self, getVernacularLanguages, header=None):
        return self.call('getVernacularLanguages', getVernacularLanguages, header=header)

    def getCoreMetadataFromTSN(self, getCoreMetadataFromTSN, header=None):
        return self.call('getCoreMetadataFromTSN', getCoreMetadataFromTSN, header=header)

    def getParentTSNFromTSN(self, getParentTSNFromTSN, header=None):
        return self.call('getParentTSNFromTSN', getParentTSNFromTSN, header=header)

    def getJurisdictionValues(self, getJurisdictionValues, header=None):
        return self.call('getJurisdictionValues', getJurisdictionValues, header=header)

    def searchByScientificNameEndsWith(self, searchByScientificNameEndsWith, header=None):
        return self.call('searchByScientificNameEndsWith', searchByScientificNameEndsWith, header=header)

    def getFullRecordFromLSID(self, getFullRecordFromLSID, header=None):
        return self.call('getFullRecordFromLSID', getFullRecordFromLSID, header=header)

    def searchForAnyMatch(self, searchForAnyMatch, header=None):
        return self.call('searchForAnyMatch', searchForAnyMatch, header=header)

    def getCoverageFromTSN(self, getCoverageFromTSN, header=None):
        return self.call('getCoverageFromTSN', getCoverageFromTSN, header=header)

    def searchByScientificName(self, searchByScientificName, header=None):
        return self.call('searchByScientificName', searchByScientificName, header=header)

    def getExpertsFromTSN(self, getExpertsFromTSN, header=None):
        return self.call('getExpertsFromTSN', getExpertsFromTSN, header=header)


filename = r"N:\Metadata\MetadataWizard\pymdwizard\pymdwizard\Scratch\itis.py"

import importlib.util
spec = importlib.util.spec_from_file_location("itis", filename)
itis = importlib.util.module_from_spec(spec)
spec.loader.exec_module(itis)

itis

itis.SearchByCommonName('brown bear')

import scio

import networkx as nx
G=nx.Graph()

G.add_node(1)

G.add_nodes_from([2,3])

H=nx.path_graph(10)
G.add_nodes_from(H)

import matplotlib.pyplot as plt
nx.draw(G)

plt.show()


